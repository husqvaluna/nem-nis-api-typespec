openapi: 3.0.0
info:
  title: NEM NIS API Endpoints
  version: '1.22'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: OpenAPI Specification of NEM NIS API
tags:
  - name: block
  - name: chain
  - name: nis-status
  - name: node
paths:
  /block/at/public:
    post:
      operationId: Block_getBlockAtHeight
      summary: Getting a block with a given height
      description: ''
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema: {}
      tags:
        - block
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                blockHeight:
                  type: object
  /block/get:
    get:
      operationId: Block_getBlockByHash
      summary: Getting a block with a given hash
      description: ''
      parameters:
        - name: blockHash
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema: {}
      tags:
        - block
  /chain/height:
    get:
      operationId: Chain_getChainInfo
      summary: ''
      description: ''
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockHeight'
      tags:
        - chain
  /chain/last-block:
    get:
      operationId: Chain_getChainLastBlock
      summary: Last block of the block chain score
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema: {}
      tags:
        - chain
  /chain/score:
    get:
      operationId: Chain_getChainScore
      summary: Block chain score
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockChainScore'
      tags:
        - chain
  /heartbeat:
    get:
      operationId: Status_getHeartbeat
      summary: ''
      description: ''
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NemRequestResult'
      tags:
        - nis-status
  /node/active-peers/max-chain-height:
    get:
      operationId: Node_getActivePeersMaxChainHeight
      summary: Maximum chain height in the active neighborhood
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockHeight'
      tags:
        - node
  /node/experiences:
    get:
      operationId: Node_getNodeExperiences
      summary: Requesting node experiences
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtendedNodeExperiencePair'
      tags:
        - node
  /node/extended-info:
    get:
      operationId: Node_getNodeExtendedInfo
      summary: Extended node information
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NisNodeInfo'
      tags:
        - node
  /node/info:
    get:
      operationId: Node_getNodeInfo
      summary: Basic node information
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema: {}
      tags:
        - node
  /node/peer-list/active:
    get:
      operationId: Node_getActiveNodePeers
      summary: Active neighborhood
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeCollection'
      tags:
        - node
  /node/peer-list/all:
    get:
      operationId: Node_getAllNodePeers
      summary: Complete neighborhood
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeCollection'
      tags:
        - node
  /node/peer-list/reachable:
    get:
      operationId: Node_getReachableNodePeers
      summary: Reachable neighborhood
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeCollection'
      tags:
        - node
  /status:
    get:
      operationId: Status_getStatus
      summary: Status
      description: ''
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NemRequestResult'
      tags:
        - nis-status
components:
  schemas:
    ApplicationMetaData:
      type: object
      properties:
        version:
          type: string
          description: The version of the NIS application.
        build:
          type: string
          description: The build of the NIS application.
        startTime:
          type: string
          description: The start time of the NIS application.
        currentTime:
          type: string
          description: The current time of the NIS application.
      description: Represents application meta data (e.g., NIS version).
    BlockChainScore:
      type: object
      required:
        - score
      properties:
        score:
          type: string
          description: The score of the blockchain as a hexadecimal string.
      description: Represents the score of the blockchain.
    BlockHeight:
      type: object
      required:
        - height
      properties:
        height:
          type: integer
          format: int64
          minimum: 1
          description: The height of the block.
      description: Represents the height of a block in the blockchain.
    ExtendedNodeExperiencePair:
      type: object
      required:
        - node
        - syncs
        - experience
      properties:
        node:
          allOf:
            - $ref: '#/components/schemas/Node'
          description: The remote Node object.
        syncs:
          type: integer
          format: int32
          description: The number of synchronization attempts the node had with the remote node.
        experience:
          allOf:
            - $ref: '#/components/schemas/NodeExperience'
          description: The communication experience with the remote node.
      description: Represents a pair of a node and its communication experience.
    NemAnnounceResult:
      type: object
      required:
        - transactionHash
      properties:
        transactionHash:
          allOf:
            - $ref: '#/components/schemas/TransactionHash'
          description: The hash object of the transaction.
        innerTransactionHash:
          type: object
          allOf:
            - $ref: '#/components/schemas/TransactionHash'
          nullable: true
          description: The hash object of the inner transaction or null if the transaction is not a multisig transaction.
      allOf:
        - $ref: '#/components/schemas/NemRequestResult'
      description: |-
        Represents the result of announcing a transaction.
        Extends NemRequestResult with transaction hash information.
    NemRequestResult:
      type: object
      required:
        - type
        - code
        - message
      properties:
        type:
          type: number
          enum:
            - 1
            - 2
            - 4
          description: 'The type of the result (1: validation, 2: heart beat, 4: status).'
        code:
          type: integer
          format: int32
          description: The code of the result. Interpretation depends on the type.
        message:
          type: string
          description: A human-readable message describing the result.
      description: Represents the result of a NEM request, typically used for validation or status.
    NisNodeInfo:
      type: object
      required:
        - node
        - nisInfo
      properties:
        node:
          allOf:
            - $ref: '#/components/schemas/Node'
          description: Contains the node object.
        nisInfo:
          allOf:
            - $ref: '#/components/schemas/ApplicationMetaData'
          description: Contains the application meta data substructure.
      description: Provides detailed information about a NIS node.
    Node:
      type: object
      required:
        - metaData
        - endpoint
        - identity
      properties:
        metaData:
          allOf:
            - $ref: '#/components/schemas/NodeMetaData'
          description: Meta data for the node.
        endpoint:
          allOf:
            - $ref: '#/components/schemas/NodeEndpoint'
          description: Endpoint information for the node.
        identity:
          allOf:
            - $ref: '#/components/schemas/NodeIdentity'
          description: Identity information for the node.
      description: Represents a node in the NEM network.
    NodeCollection:
      type: object
      required:
        - inactive
        - active
        - busy
        - failure
      properties:
        inactive:
          type: array
          items:
            $ref: '#/components/schemas/Node'
          description: Array of inactive nodes.
        active:
          type: array
          items:
            $ref: '#/components/schemas/Node'
          description: Array of active nodes.
        busy:
          type: array
          items:
            $ref: '#/components/schemas/Node'
          description: Array of busy nodes.
        failure:
          type: array
          items:
            $ref: '#/components/schemas/Node'
          description: Array of failing nodes.
      description: Holds arrays of nodes with different statuses.
    NodeEndpoint:
      type: object
      required:
        - protocol
        - port
        - host
      properties:
        protocol:
          type: string
          enum:
            - http
            - https
          description: The protocol used for communication (HTTP or HTTPS).
        port:
          type: integer
          format: int32
          description: The port used for communication.
        host:
          type: string
          description: The IP address or hostname of the endpoint.
      description: Represents the endpoint information for a node.
    NodeExperience:
      type: object
      required:
        - s
        - f
      properties:
        s:
          type: integer
          format: int32
          description: The number of successful communications with the remote node.
        f:
          type: integer
          format: int32
          description: The number of failed communications with the remote node.
      description: Represents the communication experience with a remote node.
    NodeIdentity:
      type: object
      required:
        - name
        - public-key
      properties:
        name:
          type: string
          description: The name of the node.
        public-key:
          allOf:
            - $ref: '#/components/schemas/PublicKey'
          description: The public key used to identify the node (hexadecimal string, 64 chars).
      description: Represents the identity information for a node.
    NodeMetaData:
      type: object
      required:
        - features
        - networkId
        - application
        - version
        - platform
      properties:
        features:
          type: integer
          format: int32
          description: The number of features the node has.
        networkId:
          type: integer
          format: int32
          description: 'The network id (104: mainnet, 96: mijin, 152: testnet).'
        application:
          type: string
          description: The name of the application that is running the node.
        version:
          type: string
          description: The version of the application.
        platform:
          type: string
          description: The underlying platform (OS, java version).
      description: Represents meta data for a node.
    PublicKey:
      type: string
      maxLength: 64
      format: hex
      description: Public key.
    TransactionHash:
      type: object
      required:
        - data
      properties:
        data:
          type: string
          format: hex
          description: The transaction hash data as a hexadecimal string.
      description: Represents the hash of a transaction.
servers:
  - url: http://ntn2.dusanjp.com:7890
    description: nis1testnet-2a
    variables: {}
  - url: http://ntn1.dusanjp.com:7890
    description: nis1testnet-1a
    variables: {}
  - url: http://tortuga.nemtest.net:7890
    description: tortuga
    variables: {}
  - url: http://ocracoke.nemtest.net:7890
    description: ocracoke
    variables: {}
  - url: http://libertalia.nemtest.net:7890
    description: libertalia
    variables: {}
  - url: http://localhost:3000
    description: Local development
    variables: {}
